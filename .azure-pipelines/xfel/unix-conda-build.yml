# Script for building CCTBX on linux and macOS
#
# Variables:
#   CONDA: Linux, MacOSX
#   OS: linux-64, osx-64
#   PYTHON_VERSION: py36

steps:

# download components
- checkout: none

- task: DownloadPipelineArtifact@2
  displayName: Download modules tarball
  inputs:
    source: 'current'
    artifact: xfel_modules
    path: $(Pipeline.Workspace)

- script: |
    cd $(Pipeline.Workspace)
    tar -xf modules.tar
    rm modules.tar
    rm modules/ls49_big_data/adse13_228/exap_0.hdf5
    rm modules/ls49_big_data/adse13_196/reference/step5_MPIbatch_000*.img.gz
  displayName: Extract modules tarball

- script: |
    cd $(Pipeline.Workspace)
    ln -s modules/cctbx_project/libtbx/auto_build/bootstrap.py
  displayName: Link bootstrap.py

# install miniconda
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: 'miniconda'
    path: $(Pipeline.Workspace)/miniconda
  displayName: Download miniconda

- script: |
    set -x -e
    bash $(Pipeline.Workspace)/miniconda/Miniconda3-latest-$(CONDA)-x86_64.sh -b -u -p $(Pipeline.Workspace)/miniconda
  displayName: Install miniconda

# create conda environment
#- task: DownloadPipelineArtifact@2
#  displayName: Download conda packages
#  inputs:
#    source: 'current'
#    artifact: $(PYTHON_VERSION)_$(OS)
#    path: $(Pipeline.Workspace)/channel
#
#- script: |
#    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
#    conda install -y conda-build
#    cd $(Pipeline.Workspace)/channel
#    conda index .
#    echo @EXPLICIT > env.txt
#    for filename in `cat filenames.txt`; do
#      echo file://$(Pipeline.Workspace)/channel/${filename} >> env.txt
#    done
#  displayName: Build local channel

- script: |
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    #conda create -y --offline -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)/channel/env.txt
    conda create -y -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)/modules/dials/.conda-envs/dials_$(PYTHON_VERSION)_$(OS).txt
    conda install -y -c conda-forge --no-deps -n $(PYTHON_VERSION) junit-xml
    conda install -y pandas -n $(PYTHON_VERSION)
  displayName: Create conda environment

# build
- script: |
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    python bootstrap.py build --builder=xfel --use-conda=${CONDA_PREFIX} --nproc=4 --config-flags="--enable_openmp_if_possible=True"
    if [ "$(OS)" = "linux-64" ]; then
      cd build
      source setpaths.sh
      libtbx.configure lunus
      make
    fi
  displayName: Configure and Build

# test
- script: |
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    source ./build/setpaths.sh
    mkdir tests
    cd tests
    libtbx.configure xfel_regression LS49 ls49_big_data
    chmod +x $(Pipeline.Workspace)/modules/xfel_regression/merging_test_data/xfel_merge.sh
    chmod +x $(Pipeline.Workspace)/modules/xfel_regression/merging_test_data/merge_thermo.csh
    export OMP_NUM_THREADS=4
    libtbx.run_tests_parallel module=uc_metrics module=simtbx module=xfel_regression module=LS49 nproc=4
  failOnStderr: false
  displayName: Test

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Pipeline.Workspace)/tests/output.xml'
